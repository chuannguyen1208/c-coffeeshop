@using WebApp.Components.Pages.Item.Components

@using CShop.Contracts.Items

@using CShop.UseCases.Items.Queries
@using CShop.UseCases.Items.Commands

@page "/settings/item"
@page "/settings/item/{Id}"
@rendermode InteractiveServer
@inject NavigationManager nav
@inject IMediator mediator
@inject IMapper mapper

<PageTitle>Item</PageTitle>

<div class="row">
    <div class="col-5 col-xs-12 p-2">
        <div class="card">
            <div class="card-body">
                <EditForm Model="model" OnSubmit="Save" FormName="item-detail">
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <input class="form-control" @bind-value="model.Name">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Price</label>
                        <div class="input-group mb-3">
                            <span class="input-group-text">$</span>
                            <input type="text" class="form-control" aria-label="Amount (to the nearest dollar)" @bind-value="model.Price">
                            <span class="input-group-text">.00</span>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Img</label>
                        <InputFile class="form-control" accept="image/*" OnChange="OnFileInput" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Ingredients</label>
                        <div>
                            <ItemIngredients ItemId="model.Id" @ref="settingItemIngredientsElement"></ItemIngredients>
                        </div>
                    </div>
                    <div class="mb-3"></div>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </EditForm>
            </div>
        </div>

    </div>
</div>

@code {
    ItemRequest model = new();
    IBrowserFile? file;
    ItemIngredients settingItemIngredientsElement = default!;

    [Parameter]
    public string? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!Guid.TryParse(Id, out var id))
        {
            return;
        }

        var itemResponse = await mediator.Send(new GetItemQuery(id));
        model = mapper.Map<ItemRequest>(itemResponse);
    }

    async Task OnFileInput(InputFileChangeEventArgs e)
    {
        if (e.FileCount == 0 || !e.File.ContentType.StartsWith("image"))
        {
            return;
        }

        file = e.File;

        await Task.CompletedTask;
    }

    async Task Save()
    {
        var itemIngredients = settingItemIngredientsElement.itemIngredients;

        if (string.IsNullOrEmpty(Id))
        {
            await mediator.Send(new CreateItemCommand(model.Name, model.Price, itemIngredients, file));
        }
        else
        {
            await mediator.Send(new UpdateItemCommand(model.Id, model.Name, model.Price, itemIngredients, file));
        }

        nav.NavigateTo("settings");
    }
}
