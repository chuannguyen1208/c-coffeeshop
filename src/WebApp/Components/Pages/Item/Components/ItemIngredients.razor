@using CShop.Contracts.Ingredients
@using CShop.Contracts.Items

@using CShop.UseCases.Ingredients.Queries
@using CShop.UseCases.Items.Queries

@inject IMediator mediator
@inject IMapper mapper

@foreach (var itemIngredient in itemIngredients)
{
    <div class="row mb-3">
        <div class="col-6">
            <select class="form-select" aria-label="Default select example" place @bind="@itemIngredient.IngredientId">
                <option selected>Open this select menu</option>
                @foreach (var ingredient in ingredients)
                {
                    <option value="@ingredient.Id" class="p-3">@ingredient.Name</option>
                }
            </select>
        </div>
        <div class="col">
            <input class="form-control" type="text" @bind-value="@itemIngredient.QuantityRequired" />
        </div>
        <div class="col">
            <btn class="btn btn-light" @onclick="() => itemIngredients.Remove(itemIngredient)">
                <i class="bi bi-trash"></i>
            </btn>
        </div>
    </div>
}

<button class="btn btn-light btn-sm" @onclick="AddItemIngredient" @onclick:preventDefault>
    <i class="bi bi-plus-circle"></i>
</button>

@code {
    private IEnumerable<IngredientResponse> ingredients = [];

    [Parameter]
    public Guid? ItemId { get; set; }
    public List<ItemIngredientRequest> itemIngredients = [];

    protected override async Task OnInitializedAsync()
    {
        ingredients = await mediator.Send(new GetIngredientsQuery());

        if (!ItemId.HasValue)
        {
            return;
        }

        var itemIngredientsResponse = await mediator.Send(new GetItemIngredientsQuery(ItemId.Value));
        itemIngredients = mapper.Map<List<ItemIngredientRequest>>(itemIngredientsResponse);
    }

    void AddItemIngredient()
    {
        itemIngredients.Add(new ItemIngredientRequest
            {
                IngredientId = Guid.NewGuid(),
                ItemId = ItemId ?? Guid.NewGuid(),
                QuantityRequired = 0
            });
    }
}
