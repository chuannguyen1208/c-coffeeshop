@inject IIngredientService ingredientService
@inject ICommonInterop commonJs
@inject IToastService toast

<div class="">
    <div>
        <a href="settings/ingredient/0" class="btn btn-primary rounded-pill btn-sm">Create Ingredient</a>
    </div>
    <ul class="list-group mt-2">
        @foreach (var item in items)
        {
            <li class="list-group-item mb-1">
                <div class="d-flex justify-content-between">
                    <div>
                        @item.Name - @($"{item.StockLevel} {item.StockName}")
                    </div>
                    <div>
                        <a href="settings/ingredient/@item.Id" class="btn btn-sm">
                            <i class="bi bi-pencil"></i>
                        </a>
                        <button class="btn btn-sm" @onclick="async () => await DeleteIngredient(item.Id)">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </div>
            </li>
        }
    </ul>
</div>

@code {
    IEnumerable<IngredientDto> items = [];

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
    }

    async Task DeleteIngredient(int id)
    {
        var confirmed = await commonJs.Confirm("Delete this item?");
        if (confirmed)
        {
            try
            {
                await ingredientService.DeleteIngredient(id);
                await LoadItems();
            }
            catch (Exception ex)
            {
                await toast.ToastError(ex.Message);
            }
        }
    }

    async Task LoadItems()
    {
        items = await ingredientService.GetIngredients();
    }
}
