@using WebApp.Components.Pages.Setting.Components.Item
@page "/settings/item"
@page "/settings/item/{Id}"
@rendermode InteractiveServer
@inject IItemService itemService
@inject IToastService toast
@inject NavigationManager nav

<PageTitle>Item</PageTitle>

<div class="row">
    <div class="col-5 col-xs-12 p-2">
        <div class="card">
            <div class="card-body">
                <EditForm Model="model" OnSubmit="Save" FormName="item-detail">
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <input class="form-control" @bind-value="model.Name">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Price</label>
                        <div class="input-group mb-3">
                            <span class="input-group-text">$</span>
                            <input type="text" class="form-control" aria-label="Amount (to the nearest dollar)" @bind-value="model.Price">
                            <span class="input-group-text">.00</span>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Img</label>
                        <InputFile class="form-control" accept="image/*" OnChange="OnFileInput" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Ingredients</label>
                        <div>
                            <ItemIngredients ItemId="model.Id" @ref="settingItemIngredientsElement"></ItemIngredients>
                        </div>
                    </div>
                    <div class="mb-3"></div>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </EditForm>
            </div>
        </div>

    </div>
</div>

@code {
    ItemDto model = new ItemDto { Name = "" };
    IBrowserFile? file;
    ItemIngredients settingItemIngredientsElement = default!;

    [Parameter] 
    public string? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var hasId = Guid.TryParse(Id, out var id);

        if (!hasId)
        {
            return;
        }

        model = await itemService.GetItem(id);
    }

    async Task OnFileInput(InputFileChangeEventArgs e)
    {
        if (e.FileCount > 0)
        {
            if (!e.File.ContentType.StartsWith("image"))
            {
                await toast.ToastError("File selected must be image format.");
                return;
            }

            file = e.File;
        }
    }

    async Task Save()
    {
        try
        {
            var ingredients = settingItemIngredientsElement.itemIngredients;

            if (string.IsNullOrEmpty(Id))
            {
                await itemService.CreateItem(model, file, ingredients);
            }
            else
            {
                await itemService.UpdateItem(model, file, ingredients);
            }

            nav.NavigateTo("settings");
        }
        catch (Exception ex)
        {
            await toast.ToastError(ex.Message);
        }
    }
}
