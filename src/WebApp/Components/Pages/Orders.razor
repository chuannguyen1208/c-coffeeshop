@using CShop.UseCases.Entities
@page "/orders"
@rendermode InteractiveServer
@implements IDisposable
@inject OrderKitchenState kitchenState


<PageTitle>Orders</PageTitle>

<div class="row">
    <div class="col-12">
        <ul class="list-group mt-2">
            <li class="list-group-item mb-2">
                <div class="row">
                    <div class="col-2">Ord</div>
                    <div class="col-2 text-center">Status</div>
                    <div class="col"></div>
                </div>
            </li>
            @foreach (var order in kitchenState.Orders)
            {
                <li class="list-group-item mb-2">
                    <div class="row d-flex align-items-center">
                        <div class="col-2">@order.Id</div>
                        <div class="col-2 text-center @StatusColor(order)">
                            <span class="px-4 py-1 border border-1 rounded-pill">@order.Status</span>
                        </div>
                        <div class="col text-end">
                            @if (ShowChangeStatusBtn(order))
                            {
                                <button class="btn btn-sm btn-outline-primary">Change Status</button>
                            }
                            else
                            {
                                <button class="btn btn-sm btn-outline-primary">Re-open</button>
                            }
                        </div>
                    </div>
                </li>
            }
        </ul>
    </div>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        kitchenState.OnChange += StateHasChangedInvoke;
        await kitchenState.Init();
    }

    bool ShowChangeStatusBtn(OrderDto order) => order.Status != OrderStatus.Completed && order.Status != OrderStatus.Returned;

    string StatusColor(OrderDto order)
    {
        return order.Status switch
        {
            CShop.UseCases.Entities.OrderStatus.Created => "text-info",
            CShop.UseCases.Entities.OrderStatus.Processing => "text-secondary",
            CShop.UseCases.Entities.OrderStatus.Completed => "text-success",
            _ => ""
        };
    }

    void StateHasChangedInvoke()
    {
        _ = InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        kitchenState.OnChange -= StateHasChangedInvoke;
    }
}
