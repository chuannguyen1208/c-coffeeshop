@using CShop.Contracts.Ingredients
@using CShop.UseCases.Ingredients.Queries
@using CShop.UseCases.Ingredients.Commands

@page "/settings/ingredient"
@page "/settings/ingredient/{Id}"
@rendermode InteractiveServer
@inject NavigationManager nav
@inject IMediator mediator
@inject IMapper mapper
@inject IToastService toast

<PageTitle>Ingredient</PageTitle>

<div class="row">
    <div class="col-5 col-xs-12 p-2">
        <div class="card">
            <div class="card-body">
                <EditForm Model="model" OnSubmit="Save" FormName="ingredient-detail">
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <input class="form-control" @bind-value="model.Name">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Stock Level</label>
                        <input class="form-control" @bind-value="model.StockLevel">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Stock Name</label>
                        <input class="form-control" placeholder="ml, cups,..." @bind-value="model.StockName">
                    </div>
                    <div class="mb-3"></div>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </EditForm>
            </div>
        </div>

    </div>
</div>

@code {
    [Parameter] public string? Id { get; set; }
    IngredientRequest model = new();

    protected override async Task OnInitializedAsync()
    {
        if (!Guid.TryParse(Id, out var id))
        {
            return;
        }

        var ingredientResponse = await mediator.Send(new GetIngredientQuery(id));
        model = mapper.Map<IngredientRequest>(ingredientResponse);
    }

    async Task Save()
    {
        try
        {
            if (string.IsNullOrEmpty(Id))
            {
                await mediator.Send(new CreateIngredientCommand(model.Name, model.StockName, model.StockLevel));
            }
            else
            {
                await mediator.Send(new UpdateIngredientCommand(model.Id, model.Name, model.StockName, model.StockLevel));
            }

            nav.NavigateTo("settings");
        }
        catch (Exception ex)
        {
            await toast.ToastError(ex.Message);
        }
    }
}
